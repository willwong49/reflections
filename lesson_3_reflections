When would you want to use a remote repository rather than keeping all your work local?

If you want to collaborate with others and share publicly or keep a version of it available in the cloud for access from any computer. Private repositories requires a subscription fee.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You may inadvertently overwrite files that you're working on locally with an updated remote version

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork is used if you want to take an existing repository and clone it in your GitHub repository to develop a variation. A clone is a copy of an existing repository copied either locally, from GitHub to local or GitHub to GitHub(Fork). Branch is when you want to code a variation without affecting the original master production code to either experiment, fix a bug or add a feature. Clone is used to copy repositories, Fork is cloning only from GitHub to GitHub and branch is used for coding variations of the master whilst leaving the original intact.

What is the benefit of having a copy of the last known state of the remote stored locally?

You can determine how many commits ahead you are of the remote to gauge how big a change it would be to merge

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

You'd have to send files to each other for review and painstakingly compare for any differences before being able to confirm the changes are acceptable. Comparing code would be a nightmare as would merging back into a master branch. Having no central system for communication regarding certain specific changes like in the pull request commenting system can quickly become messy communicating responses.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

A branch will allow the master code to remain untouched should you wish to persue a new feature or change that others can collaborate on before finally merging back into the master branch. The problems lies in trying to merge everything back via pull requests, it can be cumbersome and complicated. Developing directly in the master branch would avoid this but the likelihood of breaking master code increases.