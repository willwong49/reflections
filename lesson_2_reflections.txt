What happens when you initialize a repository? Why do you need to do it?

It creates a hidden .git folder containing the meta data regardings all the commits. Once initialised the folder can hold commits as a repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

An intermediate state that allows you to assign files that should be included in the next commit. It allows you to organise your commits by splitting logical changes in the form of separate files. 

How can you use the staging area to make sure you have one commit per logical change?

You can decide which files you want to include within the staging area for the next commit. Using git diff you can compare the differences between working directory and staged files, git diff --staged can be used to confirm the differences between staged files and the most recent commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you would like to experiment by adding new features without affecting the original code base. Branches allow you to create variations of your project from a given commit and eventually merge them if required.

How do the diagrams help you visualize the branch structure?

They clearly show how and where branches deviate from the master and also identify any commits that are not "reachable" since they cannot be traced via a known branch. These would need a branch of their own otherwise they will be discarded when checking out to another branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is the culmination of the work done on a separate branch back into the master. The diagram illustrates at what point the code was branched and how it continues on once merged, we can see clearly the reachability of the commits after merging as well.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Automatic is great to reduce the tedium of finding and merging differences yourself. Manually merging is obviously required where Git isn't smart enough to determine exactly what should be included/excluded and should rightly be flagged to the user.